<cffunction name="init" access="public" returntype="transfer.com.TransferObject" default="transfer.com.TransferObject" hint="" output="false">
<cfargument name="transfer" type="transfer.com.Transfer" required="true">
<cfargument name="utility" type="transfer.com.util.Utility" required="true">
<cfargument name="nullable" type="transfer.com.sql.Nullable" required="true">
<cfargument name="thisObject" type="transfer.com.TransferObject" required="true">
<cfscript>
instance = StructNew();
setThisObject(arguments.thisObject);
setTransfer(arguments.transfer);
setUtility(arguments.utility);
setNullable(arguments.nullable);
setClassName("console.control");
setIsDirty(true);
setIsPersisted(false);
setIsClone(false);
setcontrolID(getNullable().getNullUUID(getClassName(), "controlID"));
setwireless(false);
setheadset(false);
setLoaded(StructNew());
if(StructKeyExists(this, "configure") OR StructKeyExists(variables, "configure"))
{
configure();
}
return this;
</cfscript>
</cffunction>

<cffunction name="equalsTransfer" access="public" returntype="boolean" default="boolean" hint="If an object is persisted, returns true if they are of the same class and same id. If not, returns true if they are the same object." output="false">
<cfargument name="transfer" type="transfer.com.TransferObject" required="true">
<cfscript>
if(getIsPersisted())
{
if(getClassName() neq arguments.transfer.getClassName())
{
return false;
}
return (getcontrolID() eq arguments.transfer.getcontrolID());
}
else
{
return sameTransfer(arguments.transfer);
}
</cfscript>
</cffunction>

<cffunction name="getcontrolID" access="public" returntype="uuid" default="uuid" hint="" output="false">
<cfscript>
return instance.controlID;
</cfscript>
</cffunction>

<cffunction name="setcontrolID" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="controlID" type="uuid" required="true">
<cfscript>
if(NOT StructKeyExists(instance, "controlID") OR getcontrolID() neq arguments.controlID)
{
instance.controlID = arguments.controlID;
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getwireless" access="public" returntype="boolean" default="boolean" hint="" output="false">
<cfscript>
return instance.wireless;
</cfscript>
</cffunction>

<cffunction name="setwireless" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="wireless" type="boolean" required="true">
<cfscript>
if(NOT StructKeyExists(instance, "wireless") OR getwireless() neq arguments.wireless)
{
instance.wireless = arguments.wireless;
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getheadset" access="public" returntype="boolean" default="boolean" hint="" output="false">
<cfscript>
return instance.headset;
</cfscript>
</cffunction>

<cffunction name="setheadset" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="headset" type="boolean" required="true">
<cfscript>
if(NOT StructKeyExists(instance, "headset") OR getheadset() neq arguments.headset)
{
instance.headset = arguments.headset;
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="setMemento" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="memento" type="struct" required="true">
<cfscript>
var composite = 0;
if(NOT getIsPersisted())
{
setcontrolID(arguments.memento.controlID);
}
setPropertyMemento(arguments.memento);
</cfscript>
</cffunction>

<cffunction name="setPropertyMemento" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="memento" type="struct" required="true">
<cfscript>
setwireless(arguments.memento.wireless);
setheadset(arguments.memento.headset);
</cfscript>
</cffunction>

<cffunction name="getMemento" access="public" returntype="struct" default="struct" hint="Returns the memento for all non-lazy members of this object" output="false">
<cfscript>
var memento = StructNew();
memento.controlID = getcontrolID();
memento.transfer_isDirty = getIsDirty();
memento.transfer_isPersisted = getIsPersisted();
StructAppend(memento, getPropertyMemento());
return memento;
</cfscript>
</cffunction>

<cffunction name="getPropertyMemento" access="public" returntype="struct" default="struct" hint="returns the memento for properties" output="false">
<cfscript>
var memento = StructNew();
memento.wireless = getwireless();
memento.headset = getheadset();
return memento;
</cfscript>
</cffunction>

<cffunction name="copyValuesTo" access="public" returntype="void" default="void" hint="Copies the values of this object to one of the same class" output="false">
<cfargument name="transfer" type="transfer.com.TransferObject" required="true">
<cfscript>
if(arguments.transfer.getClassName() neq "console.control")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.transfer.getClassName()#' does not match the expected class of 'console.control'");
}
arguments.transfer.setMemento(getMemento());
</cfscript>
</cffunction>

<cffunction name="validateCacheState" access="package" returntype="boolean" default="boolean" hint="if this object is cached, then validate that all it's composites are cached too" output="false">
<cfscript>
var iterator = 0;
var item = 0;
if(getIsPersisted() AND NOT getTransfer().validateIsCached(getThisObject()))
{
return true;
}
return true;
</cfscript>
</cffunction>

<cffunction name="actionAfterCreateTransferEvent" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true">
<cfscript>
switch(arguments.event.getTransferObject().getClassName())
{
}
</cfscript>
</cffunction>

<cffunction name="actionAfterDeleteTransferEvent" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true">
<cfscript>
switch(arguments.event.getTransferObject().getClassName())
{
}
switch(arguments.event.getTransferObject().getClassName())
{
}
switch(arguments.event.getTransferObject().getClassName())
{
}
switch(arguments.event.getTransferObject().getClassName())
{
}
</cfscript>
</cffunction>

<cffunction name="actionAfterUpdateTransferEvent" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true">
<cfscript>
switch(arguments.event.getTransferObject().getClassName())
{
}
</cfscript>
</cffunction>

<cffunction name="actionBeforeDiscardTransferEvent" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true">
<cfscript>
var discard = false;
switch(arguments.event.getTransferObject().getClassName())
{
}
switch(arguments.event.getTransferObject().getClassName())
{
}
switch(arguments.event.getTransferObject().getClassName())
{
}
switch(arguments.event.getTransferObject().getClassName())
{
}
if(discard)
{
getTransfer().discard(getThisObject());
}
</cfscript>
</cffunction>


